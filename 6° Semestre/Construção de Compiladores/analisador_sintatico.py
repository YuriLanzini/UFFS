

# Exemplo de tabela SLR gerada (simplificada)
parsing_table = {
    (0, 'if'): 's2', (0, 'C'): 'p1',
    (1, '$'): 'acc',
    (2, '('): 's3',
    (3, '('): 's12', (3, 'ID'): 's9', (3, 'RETURN'): 's10', (3, 'INTEGER'): 's13', (3, 'FLOAT'): 's14', (3, 'E'): 'p4', (3, 'T'): 'p5', (3, 'G'): 'p6', (3, 'H'): 'p7', (3, 'F'): 'p8', (3, 'N'): 'p11',
    (4, ')'): 's15', 
    (5, ')'): 'r5', (5, '}'): 'r5', (5, ';'): 'r5', 
    (6, ')'): 'r13', (6, '}'): 'r13', (6, '=='): 's17', (6, '!='): 's18', (6, '<'): 's19', (6, '<='): 's20', (6, '>'): 's21', (6, '>='): 's22', (6, ';'): 'r13', (6, 'T1'): 'p16',
    (7, ')'): 'r17', (7, '}'): 'r17', (7, '=='): 'r17', (7, '!='): 'r17', (7, '<'): 'r17', (7, '<='): 'r17', (7, '>'): 'r17', (7, '>='): 'r17', (7, '+'): 's24', (7, '-'): 's25', (7, ';'): 'r17', (7, 'G1'): 'p23',
    (8, ')'): 'r21', (8, '}'): 'r21', (8, '=='): 'r21', (8, '!='): 'r21', (8, '<'): 'r21', (8, '<='): 'r21', (8, '>'): 'r21', (8, '>='): 'r21', (8, '+'): 'r21', (8, '-'): 'r21', (8, ';'): 'r21', (8, 'H1'): 'p26',
    (9, ')'): 'r24', (9, '}'): 'r24', (9, '=='): 'r24', (9, '!='): 'r24', (9, '<'): 'r24', (9, '<='): 'r24', (9, '>'): 'r24', (9, '>='): 'r24', (9, '+'): 'r24', (9, '-'): 'r24', (9, '*'): 'r24', (9, '/'): 'r24', (9, '='): 's29', (9, ';'): 'r24', 
    (10, '('): 's12', (10, 'ID'): 's9', (10, 'RETURN'): 's10', (10, 'INTEGER'): 's13', (10, 'FLOAT'): 's14', (10, 'E'): 'p30', (10, 'T'): 'p5', (10, 'G'): 'p6', (10, 'H'): 'p7', (10, 'F'): 'p8', (10, 'N'): 'p11', 
    (11, ')'): 'r25', (11, '}'): 'r25', (11, '=='): 'r25', (11, '!='): 'r25', (11, '<'): 'r25', (11, '<='): 'r25', (11, '>'): 'r25', (11, '>='): 'r25', (11, '+'): 'r25', (11, '-'): 'r25', (11, '*'): 'r25', (11, '/'): 'r25', (11, ';'): 'r25',
    (12, '('): 's12', (12, 'ID'): 's9', (12, 'RETURN'): 's10', (12, 'INTEGER'): 's13', (12, 'FLOAT'): 's14', (12, 'E'): 'p31', (12, 'T'): 'p5', (12, 'G'): 'p6', (12, 'H'): 'p7', (12, 'F'): 'p8', (12, 'N'): 'p11', 
    (13, ')'): 'r27', (13, '}'): 'r27', (13, '=='): 'r27', (13, '!='): 'r27', (13, '<'): 'r27', (13, '<='): 'r27', (13, '>'): 'r27', (13, '>='): 'r27', (13, '+'): 'r27', (13, '-'): 'r27', (13, '*'): 'r27', (13, '/'): 'r27', (13, ';'): 'r27',
    (14, ')'): 'r28', (14, '}'): 'r28', (14, '=='): 'r28', (14, '!='): 'r28', (14, '<'): 'r28', (14, '<='): 'r28', (14, '>'): 'r28', (14, '>='): 'r28', (14, '+'): 'r28', (14, '-'): 'r28', (14, '*'): 'r28', (14, '/'): 'r28', (14, ';'): 'r28',
    (15, '{'): 's33', (15, 'B'): 'p32',
    (16, ')'): 'r6', (16, '}'): 'r6', (16, ';'): 'r6',
    (17, '('): 's12', (17, 'ID'): 's9', (17, 'RETURN'): 's10', (17, 'INTEGER'): 's13', (17, 'FLOAT'): 's14', (17, 'G'): 'p34', (17, 'H'): 'p7', (17, 'F'): 'p8', (17, 'N'): 'p11', 
    (18, '('): 's12', (18, 'ID'): 's9', (18, 'RETURN'): 's10', (18, 'INTEGER'): 's13', (18, 'FLOAT'): 's14', (18, 'G'): 'p35', (18, 'H'): 'p7', (18, 'F'): 'p8', (18, 'N'): 'p11', 
    (19, '('): 's12', (19, 'ID'): 's9', (19, 'RETURN'): 's10', (19, 'INTEGER'): 's13', (19, 'FLOAT'): 's14', (19, 'G'): 'p36', (19, 'H'): 'p7', (19, 'F'): 'p8', (19, 'N'): 'p11', 
    (20, '('): 's12', (20, 'ID'): 's9', (20, 'RETURN'): 's10', (20, 'INTEGER'): 's13', (20, 'FLOAT'): 's14', (20, 'G'): 'p37', (20, 'H'): 'p7', (20, 'F'): 'p8', (20, 'N'): 'p11', 
    (21, '('): 's12', (21, 'ID'): 's9', (21, 'RETURN'): 's10', (21, 'INTEGER'): 's13', (21, 'FLOAT'): 's14', (21, 'G'): 'p38', (21, 'H'): 'p7', (21, 'F'): 'p8', (21, 'N'): 'p11', 
    (22, '('): 's12', (22, 'ID'): 's9', (22, 'RETURN'): 's10', (22, 'INTEGER'): 's13', (22, 'FLOAT'): 's14', (22, 'G'): 'p39', (22, 'H'): 'p7', (22, 'F'): 'p8', (22, 'N'): 'p11', 
    (23, ')'): 'r14', (23, '}'): 'r14', (23, '=='): 'r14', (23, '!='): 'r14', (23, '<'): 'r14', (23, '<='): 'r14', (23, '>'): 'r14', (23, '>='): 'r14', (23, ';'): 'r14',
    (24, '('): 's12', (24, 'ID'): 's9', (24, 'RETURN'): 's10', (24, 'INTEGER'): 's13', (24, 'FLOAT'): 's14', (24, 'H'): 'p40', (24, 'F'): 'p8', (24, 'N'): 'p11', 
    (25, '('): 's12', (25, 'ID'): 's9', (25, 'RETURN'): 's10', (25, 'INTEGER'): 's13', (25, 'FLOAT'): 's14', (25, 'H'): 'p41', (25, 'F'): 'p8', (25, 'N'): 'p11', 
    (26, ')'): 'r18', (26, '}'): 'r18', (26, '=='): 'r18', (26, '!='): 'r18', (26, '<'): 'r18', (26, '<='): 'r18', (26, '>'): 'r18', (26, '>='): 'r18', (26, '+'): 'r18', (26, '-'): 'r18', (26, ';'): 'r18',
    (27, '('): 's12', (27, 'ID'): 's9', (27, 'RETURN'): 's10', (27, 'INTEGER'): 's13', (27, 'FLOAT'): 's14', (27, 'F'): 'p42', (27, 'N'): 'p11',
    (28, '('): 's12', (28, 'ID'): 's9', (28, 'RETURN'): 's10', (28, 'INTEGER'): 's13', (28, 'FLOAT'): 's14', (28, 'F'): 'p43', (28, 'N'): 'p11',
    (29, '('): 's12', (29, 'ID'): 's9', (29, 'RETURN'): 's10', (29, 'INTEGER'): 's13', (29, 'FLOAT'): 's14', (29, 'E'): 'p44', (29, 'T'): 'p5', (29, 'G'): 'p6', (29, 'H'): 'p7', (29, 'F'): 'p8', (29, 'N'): 'p11',
    (30, ';'): 's45',
    (31, ')'): 's46',
    (32, 'else'): 's48', (32, '$'): 'r3', (32, 'D'): 'p47',
    (33, '('): 's12', (33, 'ID'): 's9', (33, 'RETURN'): 's10', (33, 'INTEGER'): 's13', (33, 'FLOAT'): 's14', (33, 'E'): 'p49', (33, 'T'): 'p5', (33, 'G'): 'p6', (33, 'H'): 'p7', (33, 'F'): 'p8', (33, 'N'): 'p11',
    (34, ')'): 'r13', (34, '}'): 'r13', (34, '=='): 's17', (34, '!='): 's18', (34, '<'): 's19', (34, '<='): 's20', (34, '>'): 's21', (34, '>='): 's22', (34, ';'): 'r13', (34, 'T1'): 'p50',
    (35, ')'): 'r13', (35, '}'): 'r13', (35, '=='): 's17', (35, '!='): 's18', (35, '<'): 's19', (35, '<='): 's20', (35, '>'): 's21', (35, '>='): 's22', (35, ';'): 'r13', (35, 'T1'): 'p51',
    (36, ')'): 'r13', (36, '}'): 'r13', (36, '=='): 's17', (36, '!='): 's18', (36, '<'): 's19', (36, '<='): 's20', (36, '>'): 's21', (36, '>='): 's22', (36, ';'): 'r13', (36, 'T1'): 'p52',
    (37, ')'): 'r13', (37, '}'): 'r13', (37, '=='): 's17', (37, '!='): 's18', (37, '<'): 's19', (37, '<='): 's20', (37, '>'): 's21', (37, '>='): 's22', (37, ';'): 'r13', (37, 'T1'): 'p53',
    (38, ')'): 'r13', (38, '}'): 'r13', (38, '=='): 's17', (38, '!='): 's18', (38, '<'): 's19', (38, '<='): 's20', (38, '>'): 's21', (38, '>='): 's22', (38, ';'): 'r13', (38, 'T1'): 'p54',
    (39, ')'): 'r13', (39, '}'): 'r13', (39, '=='): 's17', (39, '!='): 's18', (39, '<'): 's19', (39, '<='): 's20', (39, '>'): 's21', (39, '>='): 's22', (39, ';'): 'r13', (39, 'T1'): 'p55',
    (40, ')'): 'r17', (40, '}'): 'r17', (40, '=='): 'r17', (40, '!='): 'r17', (40, '<'): 'r17', (40, '<='): 'r17', (40, '>'): 'r17', (40, '>='): 'r17', (40, '+'): 's24', (40, '-'): 's25', (40, ';'): 'r17', (40, 'G1'): 'p56',
    (41, ')'): 'r17', (41, '}'): 'r17', (41, '=='): 'r17', (41, '!='): 'r17', (41, '<'): 'r17', (41, '<='): 'r17', (41, '>'): 'r17', (41, '>='): 'r17', (41, '+'): 's24', (41, '-'): 's25', (41, ';'): 'r17', (41, 'G1'): 'p57',
    (42, ')'): 'r21', (42, '}'): 'r21', (42, '=='): 'r21', (42, '!='): 'r21', (42, '<'): 'r21', (42, '<='): 'r21', (42, '>'): 'r21', (42, '>='): 'r21', (42, '+'): 'r21', (42, '-'): 'r21', (42, '*'): 's27', (42, '/'): 's28', (42, ';'): 'r21', (42, 'H1'): 'p58',
    (43, ')'): 'r21', (43, '}'): 'r21', (43, '=='): 'r21', (43, '!='): 'r21', (43, '<'): 'r21', (43, '<='): 'r21', (43, '>'): 'r21', (43, '>='): 'r21', (43, '+'): 'r21', (43, '-'): 'r21', (43, '*'): 's27', (43, '/'): 's28', (43, ';'): 'r21', (43, 'H1'): 'p59',
    (44, ';'): 's60',
    (45, ')'): 'r23', (45, '}'): 'r23', (45, '=='): 'r23', (45, '!='): 'r23', (45, '<'): 'r23', (45, '<='): 'r23', (45, '>'): 'r23', (45, '>='): 'r23', (45, '+'): 'r23', (45, '-'): 'r23', (45, '*'): 'r23', (45, '/'): 'r23', (45, ';'): 'r23',
    (46, ')'): 'r26', (46, '}'): 'r26', (46, '=='): 'r26', (46, '!='): 'r26', (46, '<'): 'r26', (46, '<='): 'r26', (46, '>'): 'r26', (46, '>='): 'r26', (46, '+'): 'r26', (46, '-'): 'r26', (45, '*'): 'r26', (46, '/'): 'r26', (46, ';'): 'r26',
    (47, '$'): 'r1',
    (48, '{'): 's33', (48, 'B'): 'p61',
    (49, '}'): 's62',
    (50, ')'): 'r7', (50, '}'): 'r7', (50, ';'): 'r7',
    (51, ')'): 'r8', (51, '}'): 'r8', (51, ';'): 'r8',
    (52, ')'): 'r9', (52, '}'): 'r9', (52, ';'): 'r9',
    (53, ')'): 'r10', (53, '}'): 'r10', (53, ';'): 'r10',
    (54, ')'): 'r11', (54, '}'): 'r11', (54, ';'): 'r11',
    (55, ')'): 'r12', (55, '}'): 'r12', (55, ';'): 'r12',
    (56, ')'): 'r15', (56, '}'): 'r15', (56, '=='): 'r15', (56, '!='): 'r15', (56, '<'): 'r15', (56, '<='): 'r15', (56, '>'): 'r15', (56, '>='): 'r15', (56, ';'): 'r15',
    (57, ')'): 'r16', (57, '}'): 'r16', (57, '=='): 'r16', (57, '!='): 'r16', (57, '<'): 'r16', (57, '<='): 'r16', (57, '>'): 'r16', (57, '>='): 'r16', (56, ';'): 'r15',
    (58, ')'): 'r19', (58, '}'): 'r19', (58, '=='): 'r19', (58, '!='): 'r19', (58, '<'): 'r19', (58, '<='): 'r19', (58, '>'): 'r19', (58, '>='): 'r19', (58, '+'): 'r19', (58, '-'): 'r19', (58, ';'): 'r19', 
    (59, ')'): 'r20', (59, '}'): 'r20', (59, '=='): 'r20', (59, '!='): 'r20', (59, '<'): 'r20', (59, '<='): 'r20', (59, '>'): 'r20', (59, '>='): 'r20', (59, '+'): 'r20', (59, '-'): 'r20', (59, ';'): 'r20',
    (60, ')'): 'r22', (60, '}'): 'r22', (60, '=='): 'r22', (60, '!='): 'r22', (60, '<'): 'r22', (60, '<='): 'r22', (60, '>'): 'r22', (60, '>='): 'r22', (60, '+'): 'r22', (60, '-'): 'r22', (60, '*'): 'r22', (60, '/'): 'r22', (60, ';'): 'r22',
    (61, '$'):'r2',
    (62, 'else'): 'r4', (62, '$'): 'r4',
} 

productions = {
    0: ('S', ['C']),
    1: ('C', ['if', '(', 'E', ')', 'B', 'D']),
    2: ('D', ['else', 'B']),
    3: ('D', ['ε']),
    4: ('B', ['{', 'E', '}']),
    5: ('E', ['T']),
    6: ('T', ['G', 'T1']),
    7: ('T1', ['==', 'G', 'T1']),
    8: ('T1', ['!=', 'G', 'T1']),
    9: ('T1', ['<', 'G', 'T1']),
    10: ('T1', ['<=', 'G', 'T1']),
    11: ('T1', ['>', 'G', 'T1']),
    12: ('T1', ['>=', 'G', 'T1']),
    13: ('T1', ['ε']),
    14: ('G', ['H', 'G1']),
    15: ('G1', ['+', 'H', 'G1']),
    16: ('G1', ['-', 'H', 'G1']),
    17: ('G1', ['ε']),
    18: ('H', ['F', 'H1']),
    19: ('H1', ['*', 'F', 'H1']),
    20: ('H1', ['/', 'F', 'H1']),
    21: ('H1', ['ε']),
    22: ('F', ['ID', '=', 'E', ';']),
    23: ('F', ['return', 'E', ';']),
    24: ('F', ['ID']),
    25: ('F', ['N']),
    26: ('F', ['(', 'E', ')']),
    27: ('N', ['INTEGER']),
    28: ('N', ['FLOAT'])
}


# Função para simular o parsing usando a tabela e a pilha
def parse(input_tokens):
    stack = [0]  # Pilha inicial com o estado 0
    index = 0  # Índice do token atual
    line = 1
    has_error = False  # Variável para marcar se há algum erro

    while True:
        state = stack[-1]  # Estado atual
        token = input_tokens[index]  # Símbolo atual ou fim de entrada

        if token == 'LINE':
            line += 1
            index += 1  # Avança para o próximo token
            continue  

        # Verifica ação da tabela de parsing
        action = parsing_table.get((state, token))
        
        if action is None:
            if token == 'ERROR':
                print(f"Erro léxico: linha {line}")
            else:
                print(f"Erro de sintaxe: não há ação definida para o token | {token} | na linha {line}")
            has_error = True  # Marca que houve um erro
            index += 1  # Avança para o próximo token para continuar analisando
            continue  # Vai para a próxima iteração do loop
        
        if action == 'acc':  # Aceitação
            if has_error:
                print("")
            else:
                print("Aceitação: a entrada é válida.")
            return not has_error  # Retorna True apenas se não houve erro
        
        elif action.startswith('s'):  # Shift
            next_state = int(action[1:])
            stack.append(token)  # Empilha o símbolo
            stack.append(next_state)  # Empilha o novo estado
            index += 1  # Avança para o próximo token
        
        elif action.startswith('r'):  # Reduce
            prod_num = int(action[1:])  # Número da produção a ser reduzida
            head, body = productions[prod_num]
            
            if body == ['ε']:
                stack.append(head)
                top_state = stack[-2]
            else:
                for _ in range(len(body) * 2):  # Desempilha 2 vezes o número de símbolos do corpo
                    stack.pop()
                top_state = stack[-1]  # Estado após a redução

                # Empilha o símbolo da cabeça da produção
                stack.append(head)
            
            # Faz o "goto" usando o estado atual e o símbolo da cabeça
            goto_state = parsing_table.get((top_state, head))
            if goto_state is None:
                print(f"Erro ao aplicar a produção {prod_num}: goto indefinido para o estado {top_state} e símbolo {head}")
                has_error = True  # Marca que houve um erro
                continue  # Vai para a próxima iteração do loop sem interromper
            
            stack.append(int(goto_state[1:]))
        
        else:
            print(f"Ação desconhecida: {action}")
            has_error = True
            continue  # Continua para tentar processar o próximo token
    
    return not has_error

        
def ler_tokens_do_arquivo(nome_arquivo):
    tokens = []
    dados_saida = []  
    salvar_dados = False  # Controle para saber quando começar a salvar

    with open(nome_arquivo, 'r') as file:
        for line in file:
            token = line.strip()  # Remove espaços extras e quebras de linha
            if token == 'Tabela de Símbolos:':
                salvar_dados = True
                
            if salvar_dados:
                dados_saida.append(token)
            else:
                tokens.append(token)
           
    return tokens, dados_saida


file_path = 'saida.txt' 

input_tokens, tabela_simbolos = ler_tokens_do_arquivo(file_path)
parse(input_tokens)

